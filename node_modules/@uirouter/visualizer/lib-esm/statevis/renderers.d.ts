import { Renderer } from './interface';
import { HierarchyPointNode } from 'd3-hierarchy';
import { StateVisNode } from './tree/stateVisNode';
export declare const RENDERER_PRESETS: {
    Tree: {
        layoutFn: typeof TREE_LAYOUT;
        sortNodesFn: typeof TOP_TO_BOTTOM_SORT;
        labelRenderFn: typeof SLANTED_TEXT;
        edgeRenderFn: typeof TREE_EDGE;
    };
    Cluster: {
        layoutFn: typeof CLUSTER_LAYOUT;
        sortNodesFn: typeof TOP_TO_BOTTOM_SORT;
        labelRenderFn: typeof SLANTED_TEXT;
        edgeRenderFn: typeof TREE_EDGE;
    };
    Radial: {
        layoutFn: typeof RADIAL_LAYOUT;
        sortNodesFn: typeof BOTTOM_TO_TOP_SORT;
        labelRenderFn: typeof RADIAL_TEXT;
        edgeRenderFn: typeof RADIAL_EDGE;
    };
};
export declare const DEFAULT_RENDERER: Renderer;
export declare function BOTTOM_TO_TOP_SORT(a: StateVisNode, b: StateVisNode): number;
export declare function TOP_TO_BOTTOM_SORT(a: StateVisNode, b: StateVisNode): number;
export declare function TREE_LAYOUT(rootNode: StateVisNode): HierarchyPointNode<StateVisNode>;
export declare function CLUSTER_LAYOUT(rootNode: StateVisNode): HierarchyPointNode<StateVisNode>;
export declare function RADIAL_LAYOUT(rootNode: StateVisNode): void;
export declare function RADIAL_TEXT(x: any, y: any, node: StateVisNode, renderer: Renderer): JSX.Element;
export declare function SLANTED_TEXT(x: any, y: any, node: StateVisNode, renderer: Renderer): JSX.Element;
/** Straight line */
export declare function RADIAL_EDGE(node: StateVisNode, renderer: Renderer): JSX.Element;
/** Bezier curve */
export declare function TREE_EDGE(node: StateVisNode, renderer: Renderer): JSX.Element;
